 python -m venv venv

. venv/Scripts/activate

pip list
pip freeze > requirements.txt 
pip install -r requirements.txt

Как генерировать  отчеты о тестировании?
pytest --junitxml=report.xml
Вы можете использовать плагин pytest-html.
pip install pytest-html
Генерация отчета:
pytest --html=report.html

python -m pytest
python -m pytest -m positive | python -m pytest -m "raises and positive"


------------------------------------------------------------------
### Описание параметров и настроек

1. addopts:
   - Позволяет задавать параметры командной строки по умолчанию.
 - В примере указаны:
 - -s: этот параметр отключает захват стандартного вывода и ошибок. Это позволяет видеть вывод print() и другие сообщения в консоли во время выполнения тестов.
 - -v: режим подробного вывода.
 - --tb=short: короткий формат трассировки ошибок.
 - --disable-warnings: отключение предупреждений.
 - --junitxml=report.xml: Формат XML-отчетов.

2. testpaths:
 - Указывает директории, где pytest будет искать тесты.
 - В примере указана директория tests.

3. python_files:
 - Определяет шаблоны имен файлов, которые будут восприниматься как тестовые.
 - В примере указаны файлы, начинающиеся с test_ или заканчивающиеся на _test.

4. norecursedirs:
  - Этот параметр задает список директорий, которые будут исключены из рекурсивного поиска тестов.

5. log_cli_level и log_file_level:
 - Задают уровень логирования для вывода в консоль и в файл соответственно.
 - В примере уровень логирования для консоли установлен на INFO, а для файла — на DEBUG.
 - import logging, logging.info(), logging.debug()

6. log_file:
 - Указывает имя файла, в который будут записываться логи.

7. reruns:
 - Задает количество повторных запусков упавших тестов при использовании плагина pytest-rerunfailures.
 - В примере установлено значение 3.

8. filterwarnings:
 - Позволяет игнорировать определенные предупреждения во время выполнения тестов.
 - В примере игнорируются все предупреждения типа DeprecationWarning(Предупреждение об устаревании).

9. markers:
 - Позволяет определить пользовательские маркеры, которые могут быть использованы для пометки тестов.
 - В примере определены маркеры slow и smoke.

------------------------------------------------------------------
allure generate -o ./allure-reports; allure open ./allure-reports

**@allure.epic("Вход в систему")**:
   - Указывает на эпик, к которому относится тест. Эпик — это большая функциональная область или задача.

**@allure.feature("Аутентификация")**:
   - Используется для указания функции или компонента, к которому относится тест.

**@allure.story("Вход с правильными учетными данными")**:
   - Указывает на конкретную историю в рамках функции, которая является частью эпика.

**@allure.title("Проверка функционала входа")**:
   - Используется для задания пользовательского заголовка теста.

**@allure.description("Тест проверки входа с правильными данными пользователя")**:
   - Позволяет добавить описание к тесту.

**@allure.severity(allure.severity_level.CRITICAL)**:
   - Указывает на уровень важности теста (например, блокер, критический, обычный, низкий).

