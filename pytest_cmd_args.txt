Параметры pytest
-v, --verbose: Увеличивает уровень детализации вывода. Показывает больше информации о процессе тестирования.
Пример: pytest -v

-q, --quiet: Уменьшает уровень детализации вывода. Показывает меньше информации.
Пример: pytest -q

--collect-only: Собирает и показывает список тестов без их выполнения. Это полезно для проверки того, какие тесты будут запущены.
Пример: pytest --collect-only

-k: Позволяет запускать тесты по ключевым словам.
Пример: pytest -k "test_add"

-m: Запускает тесты, которые помечены определенным маркером. `@pytest.mark.slow`
Пример: pytest -m smoke | pytest -m "smoke and slow"

-x, --exitfirst: Останавливает тестирование после первого неудачного теста.
Пример: pytest -x

--tb=<style>: Устанавливает стиль вывода трассировки ошибок (traceback). Стиль может быть:
    - `short`: короткий вывод.
    - `long`: длинный вывод с дополнительной информацией.
    - `line`: выводит только одну строку на ошибку.
    - `no`: отключает вывод трассировки.
Пример: pytest --tb=no

--maxfail=num: Останавливает тестирование после указанного количества неудачных тестов.
Пример: pytest --maxfail=3

-s и --capture=method: Контролирует захват вывода тестов. По умолчанию pytest захватывает вывод и показывает его только в случае ошибки.
Использование `-s` отключает захват и позволяет видеть вывод в реальном времени.
Пример: pytest -s

-lf, --last-failed: Запускает только последние неудачные тесты.
Пример: pytest -lf

--ff, --failed-first: Запускает сначала неудачные тесты из предыдущего запуска перед остальными успешными.
Пример: pytest --ff

-l, --showlocals: Показывает локальные переменные в случае ошибки.
Пример: pytest -l

--durations=N: Показывает N самых медленных тестов.
Пример: pytest --durations=5